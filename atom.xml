<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>边个懂</title>
  
  
  <link href="https://github.com/thisKing/thisking.github.io/atom.xml" rel="self"/>
  
  <link href="https://github.com/thisKing/thisking.github.io/"/>
  <updated>2021-02-28T09:33:11.478Z</updated>
  <id>https://github.com/thisKing/thisking.github.io/</id>
  
  <author>
    <name>边个懂</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JS数据类型</title>
    <link href="https://github.com/thisKing/thisking.github.io/2021/02/28/JS%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>https://github.com/thisKing/thisking.github.io/2021/02/28/JS%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</id>
    <published>2021-02-28T09:07:46.000Z</published>
    <updated>2021-02-28T09:33:11.478Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="JS数据类型"><a href="#JS数据类型" class="headerlink" title="JS数据类型"></a>JS数据类型</h2><p>原始数据类型<br>引用数据类型</p><h3 id="原始数据类型"><a href="#原始数据类型" class="headerlink" title="原始数据类型"></a>原始数据类型</h3><ol><li>boolean</li><li>null</li><li>undefined</li><li>number</li><li>string</li><li>symbol</li></ol><h3 id="原始数据类型-1"><a href="#原始数据类型-1" class="headerlink" title="原始数据类型"></a>原始数据类型</h3><ol><li>Object</li><li>Array</li><li>RegExp</li><li>Date</li><li>Math</li><li>Function</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h2 id=&quot;JS数据类型&quot;&gt;&lt;a href=&quot;#JS数据类型&quot; class=&quot;headerlink&quot; title=&quot;JS数据类型&quot;&gt;&lt;/a&gt;JS数据类型&lt;/h2&gt;&lt;p&gt;原始数据类型&lt;br&gt;引用数据类型&lt;/p&gt;
&lt;h3 id=&quot;原始数据类型&quot;&gt;&lt;a href=&quot;#原始</summary>
      
    
    
    
    <category term="前端" scheme="https://github.com/thisKing/thisking.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JavaScript" scheme="https://github.com/thisKing/thisking.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>this 指向问题</title>
    <link href="https://github.com/thisKing/thisking.github.io/2021/02/28/this%20%E6%8C%87%E5%90%91%E9%97%AE%E9%A2%98/"/>
    <id>https://github.com/thisKing/thisking.github.io/2021/02/28/this%20%E6%8C%87%E5%90%91%E9%97%AE%E9%A2%98/</id>
    <published>2021-02-28T08:56:07.000Z</published>
    <updated>2021-02-28T09:29:49.320Z</updated>
    
    <content type="html"><![CDATA[<p>JavaScript 中的 this 执行规则</p><h2 id="主要这些场隐式绑定的场景讨论"><a href="#主要这些场隐式绑定的场景讨论" class="headerlink" title="主要这些场隐式绑定的场景讨论:"></a>主要这些场隐式绑定的场景讨论:</h2><ol><li>全局上下文</li><li>直接调用函数</li><li>对象.方法的形式调用</li><li>new构造函数绑定</li><li>箭头函数</li><li>DOM事件绑定(特殊)</li></ol><h3 id="全局上下文"><a href="#全局上下文" class="headerlink" title="全局上下文"></a>全局上下文</h3><p>全局上下文默认this指向window, 严格模式下指向undefined。</p><h3 id="直接调用函数"><a href="#直接调用函数" class="headerlink" title="直接调用函数"></a>直接调用函数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> obj = &#123;</span><br><span class="line">a: <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">    console.log(this);</span><br><span class="line">&#125;&#125;</span><br><span class="line"><span class="built_in">let</span> func = obj.a;</span><br><span class="line">func();</span><br></pre></td></tr></table></figure><p>这种情况是直接调用。this相当于全局上下文的情况。</p><h3 id="对象-方法的形式调用"><a href="#对象-方法的形式调用" class="headerlink" title="对象.方法的形式调用"></a>对象.方法的形式调用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">obj.a();</span><br></pre></td></tr></table></figure><p>这就是对象.方法的情况，this指向这个对象</p><h3 id="new-构造函数"><a href="#new-构造函数" class="headerlink" title="new+构造函数"></a>new+构造函数</h3><p>此时构造函数中的this指向实例对象。</p><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p>箭头函数没有this, 因此也不能绑定。里面的this会指向当前最近的非箭头函数的this，找不到就是window(严格模式是undefined)。比如:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> obj = &#123;</span><br><span class="line">a: <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">    <span class="built_in">let</span> <span class="keyword">do</span> = () =&gt; &#123;</span><br><span class="line">        console.log(this);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">do</span>();</span><br><span class="line">&#125;&#125;</span><br><span class="line">obj.a(); // 找到最近的非箭头函数a，a现在绑定着obj, 因此箭头函数中的this是obj</span><br></pre></td></tr></table></figure><h3 id="DOM事件绑定"><a href="#DOM事件绑定" class="headerlink" title="DOM事件绑定"></a>DOM事件绑定</h3><p>onclick和addEventerListener中 this 默认指向绑定事件的元素。<br>IE比较奇异，使用attachEvent，里面的this默认指向window。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;JavaScript 中的 this 执行规则&lt;/p&gt;
&lt;h2 id=&quot;主要这些场隐式绑定的场景讨论&quot;&gt;&lt;a href=&quot;#主要这些场隐式绑定的场景讨论&quot; class=&quot;headerlink&quot; title=&quot;主要这些场隐式绑定的场景讨论:&quot;&gt;&lt;/a&gt;主要这些场隐式绑定的场景</summary>
      
    
    
    
    <category term="前端" scheme="https://github.com/thisKing/thisking.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JavaScript" scheme="https://github.com/thisKing/thisking.github.io/tags/JavaScript/"/>
    
  </entry>
  
</feed>
