{"meta":{"title":"边个懂","subtitle":"","description":"","author":"边个懂","url":"https://webbgd.cn","root":"/"},"pages":[{"title":"关于","date":"2021-02-28T08:22:03.865Z","updated":"2021-02-28T08:22:03.865Z","comments":false,"path":"about/index.html","permalink":"https://webbgd.cn/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"友情链接","date":"2021-02-28T08:02:16.134Z","updated":"2021-02-28T08:02:16.134Z","comments":true,"path":"links/index.html","permalink":"https://webbgd.cn/links/index.html","excerpt":"","text":""},{"title":"标签","date":"2021-03-01T14:09:07.841Z","updated":"2021-02-28T08:22:22.181Z","comments":false,"path":"tags/index.html","permalink":"https://webbgd.cn/tags/index.html","excerpt":"","text":""},{"title":"分类","date":"2021-02-28T08:22:16.414Z","updated":"2021-02-28T08:22:16.414Z","comments":false,"path":"categories/index.html","permalink":"https://webbgd.cn/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"npm 引入 mockjs 简单使用","slug":"npm-引入-mockjs-简单使用","date":"2021-03-02T16:14:33.000Z","updated":"2021-03-02T16:16:35.931Z","comments":true,"path":"2021/03/03/npm-引入-mockjs-简单使用/","link":"","permalink":"https://webbgd.cn/2021/03/03/npm-%E5%BC%95%E5%85%A5-mockjs-%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/","excerpt":"","text":"下载 npm install mockjs mock 文件 创建一个文件夹比如：mock (我是放在根目录下) 在该文件夹下创建 index.js（mock主文件，引入user.js等其它文件） 创建user.js文件（主要放user接口返回内容） index.js 代码12345678910111213141516171819202122// 引入mockjsimport Mock from &#x27;mockjs&#x27;// 引入user接口文件import user from &#x27;./user&#x27;// 引入多个的时候，用于展开平铺引入的接口const mocks = [ ...user]// 遍历每个接口注册到 mock 中mocks.forEach(e =&gt; &#123; Mock.mock( new RegExp(e.url), e.type || &#x27;get&#x27;, e.response )&#125;);// 引入导出 mockexport default Mock user.js 代码1234567891011121314151617181920212223// Mock 里面有很多模拟接口返回随机数据import Mock from &#x27;mockjs&#x27;// 返回数组（多个接口）export default [ &#123; url: &#x27;/user&#x27;, // 接口地址 type: &#x27;get&#x27;, // 接口类型（get,post） response: () =&gt; &#123; // 响应体 const data = Mock.mock(&#123; name: &#x27;@cname&#x27;, sInspectSee: &#x27;@cparagraph()&#x27;, iPrintPureImg: &#x27;@boolean(1, 5, true)&#x27; &#125;) return &#123; msg: &#x27;成功-mock&#x27;, data: data, &#125; &#125; &#125;] mockjs官网–模拟随机数据语法 vue 全局引入在 main.js 主文件中引入 123// 通过判断不等于生产环境（用户使用的环境）下引入。（相对绝对都行只要引入到上边创建的mock文件下的 index.js 即可）if (process.env.NODE_ENV !== &#x27;production&#x27;) require(&#x27;../mock&#x27;) 组件中接口调用12345678910111213// 引入 promise 实现版“ajax”网络请求import axios from &#x27;axios&#x27;export default &#123; mounted() &#123; // 请求： 地址是 user.js 创建的 /user 路径 axios.get(&#x27;/user&#x27;).then( res =&gt; &#123; // 返回结果 &#123; msg: &quot;成功-mock&quot;, data: &#123;...&#125;&#125; 。成功对上user.js中写的 response 响应值 console.log(res.data) &#125;) &#125;&#125;","categories":[{"name":"前端","slug":"前端","permalink":"https://webbgd.cn/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://webbgd.cn/tags/JavaScript/"},{"name":"npm","slug":"npm","permalink":"https://webbgd.cn/tags/npm/"},{"name":"Vue","slug":"Vue","permalink":"https://webbgd.cn/tags/Vue/"},{"name":"Webpack","slug":"Webpack","permalink":"https://webbgd.cn/tags/Webpack/"}],"author":"边个懂"},{"title":"npm 引入 axios  简单使用","slug":"npm-引入-axios-简单使用","date":"2021-03-02T16:13:57.000Z","updated":"2021-03-02T16:16:24.963Z","comments":true,"path":"2021/03/03/npm-引入-axios-简单使用/","link":"","permalink":"https://webbgd.cn/2021/03/03/npm-%E5%BC%95%E5%85%A5-axios-%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/","excerpt":"","text":"下载 npm install axios vue 全局引入在 main.js 主文件中引入 import axios from ‘axios’Vue.prototype.$http = axios // 放入到vue原型中（全局引入） 组件中接口调用1234567891011// 引入 promise 实现版“ajax”网络请求export default &#123; mounted() &#123; // 上一步已经引入到vue（this）中 this.$http.get(&#x27;/user&#x27;).then( res =&gt; &#123; console.log(res.data) &#125;) &#125;&#125;","categories":[{"name":"前端","slug":"前端","permalink":"https://webbgd.cn/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://webbgd.cn/tags/JavaScript/"},{"name":"npm","slug":"npm","permalink":"https://webbgd.cn/tags/npm/"},{"name":"Vue","slug":"Vue","permalink":"https://webbgd.cn/tags/Vue/"},{"name":"Webpack","slug":"Webpack","permalink":"https://webbgd.cn/tags/Webpack/"}],"author":"边个懂"},{"title":"空间&时间复杂度","slug":"空间&时间复杂度","date":"2021-03-02T15:52:11.000Z","updated":"2021-03-02T15:52:46.683Z","comments":true,"path":"2021/03/02/空间&时间复杂度/","link":"","permalink":"https://webbgd.cn/2021/03/02/%E7%A9%BA%E9%97%B4&%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/","excerpt":"","text":"时间复杂度 一个函数，用大O表示，比如：O(1)、O(n)、O(LogN)定性描述该算法的运行时间 O(1)12let a = 1a += 1 a 执行了一次所以是 O(1) O(N)1234let n = 10for (let i = 0; i&lt; n; i++)&#123; //&#125; n 执行了n次所以是 O(N) O(N2)1234567let n = 10for (let i = 0; i&lt; n; i++)&#123; // for (let j = 0; j&lt; n; j++)&#123; // &#125;&#125; n 执行了 O(N) * O(N) 次所以是 O(N 2) 二次方 O(logN)1234let n = 0while (n &lt; 20)&#123; n *= 2&#125; 执行了 log n次 所以是 O(logN) 空间复杂度 一个函数，用大O表示，比如：O(1)、O(n)、O(LogN) （跟时间复杂度一样）定性描述该算法的占用的空间（内存） O(N)12345let n = 10;let list = []for (let i = 0; i&lt; n; i++)&#123; list.push(i)&#125; list 占用内存 O(N)其它空间复杂度跟时间复杂度同理….","categories":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://webbgd.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"https://webbgd.cn/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"算法","slug":"算法","permalink":"https://webbgd.cn/tags/%E7%AE%97%E6%B3%95/"},{"name":"概念","slug":"概念","permalink":"https://webbgd.cn/tags/%E6%A6%82%E5%BF%B5/"}],"author":"边个懂"},{"title":"队列-数据结构","slug":"队列-数据结构","date":"2021-03-02T15:30:46.000Z","updated":"2021-03-02T15:39:04.078Z","comments":true,"path":"2021/03/02/队列-数据结构/","link":"","permalink":"https://webbgd.cn/2021/03/02/%E9%98%9F%E5%88%97-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/","excerpt":"","text":"概念 一种先进先出的数据结构 通俗概念 排队买票、排队打饭、排队打水。都是先排队的先完成。 常用的操作 js 内置函数，向数组末尾添加元素push js 内置函数，删除并返回数组的第一个元素shift 代码JavaScript 中没有队列，但是可以用 Array 实现。 12345queue = [] // 创建数组queue.push(1) // 进入queue.push(2) // 进入const item1 = queue.shift() // 出去const item2 = queue.shift() // 出去 场景食堂排队打饭计算最近请求次数JS异步中的任务队列(Event Loop)场景例子计算最近请求次数","categories":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://webbgd.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://webbgd.cn/tags/JavaScript/"},{"name":"数据结构","slug":"数据结构","permalink":"https://webbgd.cn/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"author":"边个懂"},{"title":"栈-数据结构","slug":"栈-数据结构","date":"2021-03-02T15:12:46.000Z","updated":"2021-03-02T15:29:32.889Z","comments":true,"path":"2021/03/02/栈-数据结构/","link":"","permalink":"https://webbgd.cn/2021/03/02/%E6%A0%88-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/","excerpt":"","text":"概念 一种后进先出的数据结构 通俗概念装羽毛球的羽毛球筒。把羽毛球放入到羽毛球筒中。拿出羽毛球就会从最后一个拿出。 常用的操作 js 内置函数，向数组末尾添加元素push js 内置函数，删除并返回数组的最后一个元素pop 拿数组最后一个数据stack[stack.length - 1] 代码JavaScript 中没有栈，但是可以用 Array 实现。 12345stack = [] // 创建数组stack.push(1) // 放入stack.push(2) // 放入const item1 = stack.pop() // 取出const item2 = stack.pop() // 取出 场景十进制转二进制判断字符串的括号是否有效JS函数调用过程场景例子判断字符串的括号是否有效","categories":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://webbgd.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://webbgd.cn/tags/JavaScript/"},{"name":"数据结构","slug":"数据结构","permalink":"https://webbgd.cn/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"author":"边个懂"},{"title":"JS数据类型","slug":"JS数据类型","date":"2021-02-28T09:07:46.000Z","updated":"2021-03-02T16:15:20.848Z","comments":true,"path":"2021/02/28/JS数据类型/","link":"","permalink":"https://webbgd.cn/2021/02/28/JS%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/","excerpt":"","text":"JS数据类型 原始数据类型引用数据类型 原始数据类型 boolean null undefined number string symbol 引用数据类型 Object Array RegExp Date Math Function","categories":[{"name":"前端","slug":"前端","permalink":"https://webbgd.cn/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://webbgd.cn/tags/JavaScript/"}],"author":"边个懂"},{"title":"this 指向问题","slug":"this 指向问题","date":"2021-02-28T08:56:07.000Z","updated":"2021-03-02T14:34:24.628Z","comments":true,"path":"2021/02/28/this 指向问题/","link":"","permalink":"https://webbgd.cn/2021/02/28/this%20%E6%8C%87%E5%90%91%E9%97%AE%E9%A2%98/","excerpt":"","text":"JavaScript 中的 this 执行规则 主要这些绑定的场景: 全局上下文 直接调用函数 对象.方法的形式调用 new构造函数绑定 箭头函数 DOM事件绑定(特殊) 全局上下文全局上下文默认this指向window, 严格模式下指向undefined。 直接调用函数123456let obj = &#123;a: function() &#123; console.log(this);&#125;&#125;let func = obj.a;func(); 这种情况是直接调用。this相当于全局上下文的情况。 对象.方法的形式调用1obj.a(); 这就是对象.方法的情况，this指向这个对象 new+构造函数此时构造函数中的this指向实例对象。 箭头函数箭头函数没有this, 因此也不能绑定。里面的this会指向当前最近的非箭头函数的this，找不到就是window(严格模式是undefined)。比如: 12345678let obj = &#123;a: function() &#123; let do = () =&gt; &#123; console.log(this); &#125; do();&#125;&#125;obj.a(); // 找到最近的非箭头函数a，a现在绑定着obj, 因此箭头函数中的this是obj DOM事件绑定onclick和addEventerListener中 this 默认指向绑定事件的元素。IE比较奇异，使用attachEvent，里面的this默认指向window。","categories":[{"name":"前端","slug":"前端","permalink":"https://webbgd.cn/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://webbgd.cn/tags/JavaScript/"}]}],"categories":[{"name":"前端","slug":"前端","permalink":"https://webbgd.cn/categories/%E5%89%8D%E7%AB%AF/"},{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://webbgd.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://webbgd.cn/tags/JavaScript/"},{"name":"npm","slug":"npm","permalink":"https://webbgd.cn/tags/npm/"},{"name":"Vue","slug":"Vue","permalink":"https://webbgd.cn/tags/Vue/"},{"name":"Webpack","slug":"Webpack","permalink":"https://webbgd.cn/tags/Webpack/"},{"name":"数据结构","slug":"数据结构","permalink":"https://webbgd.cn/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"算法","slug":"算法","permalink":"https://webbgd.cn/tags/%E7%AE%97%E6%B3%95/"},{"name":"概念","slug":"概念","permalink":"https://webbgd.cn/tags/%E6%A6%82%E5%BF%B5/"}]}